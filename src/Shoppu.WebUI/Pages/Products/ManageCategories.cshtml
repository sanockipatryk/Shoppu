@page "/manage/categories/{handler?}"
@model Shoppu.WebUI.Pages.Products.ManageCategoriesModel
@{
    ViewData["Title"] = "Manage categories";

    bool CategoryIsEditable(ProductCategory cat)
    {
        return ((cat.SubCategories == null || cat.SubCategories.Count() == 0) && cat.ParentCategory != null &&
        cat.HasNoExistingProducts &&
        cat?.ParentCategory?.SpecificGender == null);
    }

    string IsSpecifiedGender(ProductCategory cat) => (@cat.SpecificGender == null ? "" : cat.SpecificGender.Equals("woman")
    ? "category-woman" : "category-man");
}
@{
    void generateCategories(List<ProductCategory> categories, int currentLevel, int? parentCategoryId)
    {
        <ul id="list-collapse-@(parentCategoryId)" data-categoryId="@parentCategoryId"
        class="@(currentLevel == 0 ? "menu-list" : "my-1 ml-5 collapsed")">
            @foreach (var cat in categories)
            {
                var hasSubcategories = Model.ProductCategories.Where(c => c.ParentCategoryId == cat.Id).Count() > 0;
                <li>
                    @if (hasSubcategories)
                    {
                        <div class="is-relative">
                            <button id="collapse-@(cat.Id)" data-categoryId="@cat.Id"
                    class="button button-collapse is-white has-text-primary @(currentLevel == 0? "pl-0" : "") @IsSpecifiedGender(cat)">
                                @cat.Name <i class="fa fa-caret-down ml-1"></i>
                            </button>
                            <button data-gender="@cat.SpecificGender" data-genderEditable="@CategoryIsEditable(cat)"
                    data-categoryId="@cat.Id" data-categoryName="@cat.Name"
                    class="button is-info manage-categories edit-btn"><i class="fas fa-edit"></i></button>
                        </div>

                        generateCategories(Model.ProductCategories.Where(c => c.ParentCategoryId == cat.Id).ToList(),
                                    currentLevel + 1, cat.Id);
                    }
                    else
                    {
                        @if (cat.HasNoExistingProducts)
                        {
                        <li>
                            <p class="has-text-primary py-1 pl-4 is-relative @IsSpecifiedGender(cat)">@cat.Name
                                <button data-gender="@cat.SpecificGender" data-genderEditable="@CategoryIsEditable(cat)"
                    data-categoryId="@cat.Id" data-categoryName="@cat.Name"
                    class="button is-info manage-categories edit-btn"><i class="fas fa-edit"></i></button>
                                <button data-categoryId="@cat.Id" data-categoryName="@cat.Name"
                    class="button is-danger manage-categories delete-btn">
                                    <i class="fa-solid fa-xmark"></i>
                                </button>
                            </p>
                        </li>
                        <ul class="my-1 ml-5 pl-4">
                            <li class="">
                                <button data-gender="@cat.SpecificGender" data-parentCategoryId="@cat.Id" data-parentCategory="@cat.Name"
                    class="button is-small is-dark is-outlined add-subcategory">Add subcategory to @cat.Name</button>
                            </li>
                        </ul>
                        }
                        else
                        {
                        <button disabled title="Category already contains products"
            class="button my-1 has-text-primary productCategory @IsSpecifiedGender(cat)">
                                @cat.Name
                        </button>
                        }
                    }
                </li>

            }
            @{
                var parentCategory = Model.ProductCategories.FirstOrDefault(c => c.Id == parentCategoryId);
            }
            @if (parentCategoryId != null && parentCategory.HasNoExistingProducts)
            {
                <li>
                    <button data-gender="@parentCategory.SpecificGender" data-parentCategoryId="@parentCategoryId"
                data-parentCategory="@parentCategory.Name"
                class="button is-small is-dark is-outlined add-subcategory my-1">Add
                        subcategory to
                        @parentCategory.Name</button>
                </li>
            }
        </ul>
    }
}

<div class="container">
    @if (Model?.Notification != null)
    {
        <partial name="_Notification" model="@Model.Notification" />
    }
    <div class="columns mx-0">
        <div class="column is-8">
            <div>
                <p class="subtitle is-4 mb-3 is-grey">Current categories</p>
            </div>
            @{
                int level = 0;
                generateCategories(Model.ProductCategories.Where(c => c.ParentCategoryId == null).ToList(), level,
                null);
            }
        </div>
        <div class="column is-4">
            <form id="newCategoryForm"
                class="@(Model.DisplayAction == ProductCategoryDisplayAction.Create ? "" : "is-hidden")" method="post"
                asp-page-handler="create">
                <p class="subtitle is-4 is-grey">Adding subcategory</p>
                <input id="parentCategoryIdField" type="hidden" asp-for="@Model.NewCategory.ParentCategoryId">
                <div class="field">
                    <p class="subtitle is-5">Selected parent category: <strong
                            class="selected-category-name">@(Model.NewCategory.ParentCategoryId != null ?
                            @Model.ProductCategories.FirstOrDefault(pc => pc.Id ==
                            Model.NewCategory.ParentCategoryId).Name :
                            "-")</strong></p>
                    <span class="has-text-danger" asp-validation-for="@Model.NewCategory.ParentCategoryId"></span>
                </div>
                <div class="field">
                    <label class="label" asp-for="@Model.NewCategory.Name"></label>
                    <div class="control">
                        <input class="input" type="text" asp-for="@Model.NewCategory.Name">
                        <span class="has-text-danger" asp-validation-for="@Model.NewCategory.Name"></span>
                    </div>
                </div>
                <div class="field">
                    <label class="label" asp-for="@Model.NewCategory.UrlName"></label>
                    <div class="control">
                        <input class="input" type="text" asp-for="@Model.NewCategory.UrlName">
                        <span class="has-text-danger" asp-validation-for="@Model.NewCategory.UrlName"></span>
                    </div>
                </div>
                <div class="field">
                    <label class="label" asp-for="@Model.NewCategory.SpecificGender"></label>
                    <div class="control">
                        <div class="select is-fullwidth-select">
                            @{
                                ProductCategory? parentCategory = Model.ProductCategories.FirstOrDefault(pc => pc.Id ==
            Model.NewCategory.ParentCategoryId);
                                var disabled = (parentCategory?.SpecificGender != null ? "disabled" : null);
                            }
                            @* *@
                            <select @(disabled) class="gender-select" name="NewCategory.SpecificGender">
                                <option selected="@(parentCategory?.SpecificGender == null)" value="">Unisex</option>
                                <option selected="@(parentCategory?.SpecificGender?.Equals("woman"))"
                                    class="select-option-woman" value="woman">Woman</option>
                                <option selected="@(parentCategory?.SpecificGender?.Equals("man"))"
                                    class="select-option-man" value="man">Man</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="has-text-right">
                    <button id="submitCategoryButton" class="button is-success" type="submit">Add category</button>
                </div>
            </form>


            <form id="editCategoryForm"
                class="@(Model.DisplayAction == ProductCategoryDisplayAction.Edit ? "" : "is-hidden")" method="post"
                asp-page-handler="edit">
                <p class="subtitle is-4 is-grey">Updating category</p>
                <input id="editCategoryIdField" type="hidden" asp-for="@Model.EditCategory.CategoryId">
                <div class="field">
                    <p class="subtitle is-5">Category being edited: <strong
                            class="edited-category-name">@(Model.EditCategory.CategoryId !=
                            null ?
                            @Model.ProductCategories.FirstOrDefault(pc => pc.Id ==
                            Model.EditCategory.CategoryId).Name :
                            "-")</strong></p>
                    <span class="has-text-danger" asp-validation-for="@Model.EditCategory.CategoryId"></span>
                </div>
                <div class="field">
                    <label class="label" asp-for="@Model.EditCategory.Name"></label>
                    <div class="control">
                        <input class="input" type="text" asp-for="@Model.EditCategory.Name">
                        <span class="has-text-danger" asp-validation-for="@Model.EditCategory.Name"></span>
                    </div>
                </div>
                <div class="field">
                    <label class="label" asp-for="@Model.EditCategory.UrlName"></label>
                    <div class="control">
                        <input class="input" type="text" asp-for="@Model.EditCategory.UrlName">
                        <span class="has-text-danger" asp-validation-for="@Model.EditCategory.UrlName"></span>
                    </div>
                </div>
                <div
                    class="field @((Model.EditCategory.CategoryId != null && CategoryIsEditable(Model.ProductCategories.FirstOrDefault(pc => pc.Id == Model.EditCategory.CategoryId))) ? "" : "is-hidden") gender-select-wrapper">
                    <label class="label" asp-for="@Model.EditCategory.SpecificGender"></label>
                    <div class="control">
                        <div class="select is-fullwidth-select">
                            <select class="gender-select" asp-for="@Model.EditCategory.SpecificGender">
                                <option value="">Unisex</option>
                                <option class="select-option-woman" value="woman">Woman</option>
                                <option class="select-option-man" value="man">Man</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="is-flex is-justify-content-space-between">
                    <button id="cancelEditButton" class="button is-warning" type="button">Cancel</button>
                    <button id="submitEditCategoryButton" class="button is-info" type="submit">Update
                        category</button>
                </div>
            </form>

            <form id="deleteCategoryForm" class="is-hidden" method="post" asp-page-handler="delete">
                <p class="subtitle is-4 is-grey">Deleting category</p>
                <p class="subtitle is-5">Are you sure you want to delete category <strong
                        class="deleted-category-name">Category</strong>?</p>
                <input id="deleteCategoryIdField" type="hidden" name="categoryId">
                <div class="is-flex is-justify-content-space-between">
                    <button id="cancelDeleteButton" class="button is-warning" type="button">Cancel</button>
                    <button id="submitDeleteCategoryButton" class="button is-danger" type="submit">Delete
                        category</button>
                </div>
            </form>

        </div>
    </div>
</div>

@section Scripts {
<script>
    var $submitCategoryButton = $('#submitCategoryButton');
    var $addSubcategoryButtons = $(".add-subcategory");
    var $selectedCategoryNameField = $('.selected-category-name');

    var $newCategoryForm = $("#newCategoryForm");
    var $newCategoryGenderField = $("#newCategoryForm .gender-select")

    var $editCategoryForm = $("#editCategoryForm");


    // if category selected - expand categories leading to selected category and mark it as active
    var modelParentCategoryId = "@Model.NewCategory.ParentCategoryId";

    var modelEditCategoryId = "@Model.EditCategory.CategoryId";


    if (modelParentCategoryId.length > 0) {
        var $ulsThatContainSelectedCategory = $(`ul.collapsed:has(.button.add-subcategory[data-parentCategoryId="${modelParentCategoryId}"])`);
        $ulsThatContainSelectedCategory.each((i, el) => {
            var collapsingButton = $(`.button-collapse[data-categoryId="${$(el).attr('data-categoryId')}"]`);
            toggleCaret(collapsingButton);
            $(el).removeClass('collapsed')
        })
        setCategorySelected($(`.button.add-subcategory[data-parentCategoryId="${modelParentCategoryId}"]`))
    }

    if (modelEditCategoryId.length > 0) {
        var $ulsThatContainSelectedCategory = $(`ul.collapsed:has(.manage-categories.edit-btn[data-categoryId="${modelEditCategoryId}"])`);
        $ulsThatContainSelectedCategory.each((i, el) => {
            var collapsingButton = $(`.button-collapse[data-categoryId="${$(el).attr('data-categoryId')}"]`);
            toggleCaret(collapsingButton);
            $(el).removeClass('collapsed')
        })
        setCategorySelected($(`.manage-categories.edit-btn[data-categoryId="${modelEditCategoryId}"]`))
    }

    $addSubcategoryButtons.each((i, category) => {
        $(category).on('click', e => {
            e.preventDefault();
            var $currentlySelectedCategory = $('.add-subcategory.selected')[0];
            deselectButtons("create");

            if ($currentlySelectedCategory !== undefined) {
                setCategoryDeselected($currentlySelectedCategory)
                setCategorySelected(category)
            }
            else {
                setCategorySelected(category)
            }

            if ($(category).attr('data-gender').length > 0) {
                $newCategoryGenderField.val($(category).attr('data-gender'));
                $newCategoryGenderField.attr('disabled', "")
            }
            else {
                if ($newCategoryGenderField.attr("disabled") !== undefined) {
                    $newCategoryGenderField.removeAttr("disabled");
                    $newCategoryGenderField.val("");
                }
            }
        })
    });

    function setCategorySelected($element) {
        $($element).addClass("selected").removeClass('is-outlined')
        $selectedCategoryNameField.text($($element).attr("data-parentCategory"))
    }
    function setCategoryDeselected($element) {
        $($element).removeClass("selected").addClass('is-outlined')
    }


    var PostBackURL = '@Url.Content("~/Products/Create")';

    $submitCategoryButton.on('click', async (e) => {
        e.preventDefault();
        parentCategoryId = $('.add-subcategory.selected').attr('data-parentCategoryId');
        if (parentCategoryId !== undefined)
            $('#parentCategoryIdField').val(parseInt(parentCategoryId));
        else
            $('#parentCategoryIdField').val(null);
        if ($newCategoryGenderField.attr("disabled") !== undefined)
            $newCategoryGenderField.removeAttr("disabled");
        $newCategoryForm.submit();
    });

    $buttonsCollapse = $('button.button-collapse');
    $buttonsCollapse.each((i, button) => {
        $(button).on('click', e => {
            e.preventDefault();
            var id = $(button).attr('id');
            toggleCaret(button);
            $(`#list-${id}`).toggleClass('collapsed');
        })
    })

    function toggleCaret(button) {
        var id = $(button).attr('id');
        $(button).children('i').toggleClass('fa-caret-down');
        $(button).children('i').toggleClass('fa-caret-up');
    }

    var $cancelEditButton = $("#cancelEditButton");
    var $editCategoryButtons = $(".manage-categories.edit-btn");
    var $editCategoryIdField = $("#editCategoryIdField");
    var $editCategoryNameField = $(".edited-category-name");
    var $editCategoryGenderFieldWrapper = $('#editCategoryForm .gender-select-wrapper');
    var $editCategoryGenderField = $("#editCategoryForm .gender-select");

    $editCategoryButtons.each((index, button) => {
        $(button).on('click', e => {
            e.preventDefault();

            deselectButtons("edit");

            if (!$(button).hasClass("selected")) {
                $('.manage-categories.edit-btn.selected').removeClass('selected');
                $(button).addClass("selected");
            }
            var editedId = $(button).attr('data-categoryId');
            $("#editCategoryIdField").val(parseInt(editedId))
            $editCategoryNameField.text($(button).attr("data-categoryName"))
            $editCategoryGenderField.val($(button).attr('data-gender'));

            var genderEditable = $(button).attr('data-genderEditable').toLowerCase();

            if (genderEditable === 'true') {
                if ($editCategoryGenderFieldWrapper.hasClass('is-hidden'))
                    $editCategoryGenderFieldWrapper.removeClass('is-hidden');
            }
            else {
                if (!$editCategoryGenderFieldWrapper.hasClass('is-hidden'))
                    $editCategoryGenderFieldWrapper.addClass('is-hidden');
            }


        });
    });

    $cancelEditButton.on('click', e => {
        showForm("newCategoryForm")
        $('.manage-categories.edit-btn.selected').removeClass('selected');
    })


    var $cancelDeleteButton = $("#cancelDeleteButton");
    var $deleteCategoryButtons = $(".manage-categories.delete-btn");
    var $editCategoryIdField = $("#deleteCategoryIdField");
    var $deleteCategoryNameField = $('.deleted-category-name');

    $deleteCategoryButtons.each((index, button) => {
        $(button).on('click', e => {
            e.preventDefault();

            deselectButtons("delete");

            if (!$(button).hasClass("selected")) {
                $('.manage-categories.delete-btn.selected').removeClass('selected');
                $(button).addClass("selected");
            }
            var deletedId = $(button).attr('data-categoryId');
            $editCategoryIdField.val(parseInt(deletedId));
            $deleteCategoryNameField.text($(button).attr("data-categoryName"));
        });
    });

    $cancelDeleteButton.on('click', e => {
        showForm("newCategoryForm")
        $('.manage-categories.delete-btn.selected').removeClass('selected');
    })

    // actionType: create, edit, delete
    function deselectButtons(actionType) {
        switch (actionType) {
            case 'create':
                $('.manage-categories.delete-btn.selected')?.removeClass('selected');
                $('.manage-categories.edit-btn.selected')?.removeClass('selected');
                showForm("newCategoryForm");
                break;
            case 'edit':
                $('.manage-categories.delete-btn.selected')?.removeClass('selected');
                $('.add-subcategory.selected')?.removeClass('selected').addClass("is-outlined");
                showForm("editCategoryForm");
                break;
            case 'delete':
                $('.manage-categories.edit-btn.selected')?.removeClass('selected');
                $('.add-subcategory.selected')?.removeClass('selected').addClass("is-outlined");
                showForm("deleteCategoryForm");
                break;
        }
    }

    function showForm(formId) {
        var $forms = $("form");

        $forms.each((index, form) => {
            if (!$(form).hasClass('is-hidden'))
                $(form).addClass('is-hidden');

            $(`#${formId}`).removeClass('is-hidden')
        })
    }

</script>
}