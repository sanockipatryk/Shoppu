@model Shoppu.Domain.ViewModels.BrowseSideMenuViewModel
@using Shoppu.Domain.Entities
@{
    async Task generateCategories(List<ProductCategory> categories, string url, int currentLevel)
    {
        // adding Ids of all parent ProductCategries that lead to the choosen category
        // using this to display "opened" menu subcategories, and hide the ones that aren't choosen
        var listOfCategoryIdsToShow = new List<int>();
        var category = Model.ProductCategories.FirstOrDefault(p => p.Id == Model.CurrentProductCategoryId);
        listOfCategoryIdsToShow.Add(Model.CurrentProductCategoryId);
        while (category.ParentCategoryId != null)
        {
            listOfCategoryIdsToShow.Add((int)category.ParentCategoryId);
            category = category.ParentCategory;
        }

        <ul class=" @(currentLevel == 0 ? "menu-list pl-5 " : "my-0")">
            @foreach (var cat in categories)
            {
                <li>
                    <a class="py-1 @(currentLevel == 0? "px-0 has-text-weight-bold" : "") @(Model.CurrentProductCategoryId == cat.Id ? "has-text-primary has-text-weight-bold" : "") "
                asp-page="Browse" asp-route-gender="Male"
                asp-route-query="@(url.Length > 0 ? url.Substring(0, url.Length - 1) : "All")"
                asp-route-categoryName="@cat.Name">
                        @cat.Name
                    </a>
                    @{
                        string newUrl = url + cat.Name + "-";
                        bool hasSubcategories = Model.ProductCategories.Where(c => c.ParentCategoryId == cat.Id).Count() > 0;
                    }
                    @if (hasSubcategories && listOfCategoryIdsToShow.Contains(cat.Id))
                    {
                        await generateCategories(Model.ProductCategories.Where(c => c.ParentCategoryId == cat.Id).ToList(),
                        newUrl, currentLevel + 1);
                    }
                </li>
            }
        </ul>
    }
}

<aside class="menu browse-side-menu pull-up">
    @* <p class="title is-4 mb-2 pb-0 pl-5">
        Gender
        </p> *@
    @{
        int level = 0;
        var baseUrl = "";
        await generateCategories(Model.ProductCategories.Where(c => c.ParentCategoryId == null).ToList(), baseUrl, level);
    }
    </ul>
</aside>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        console.log('hello')
        var $baseMenus = $('.menu-list');
        console.log($($baseMenus));
    })
</script>