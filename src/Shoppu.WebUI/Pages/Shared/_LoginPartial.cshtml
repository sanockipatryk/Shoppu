@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@if (SignInManager.IsSignedIn(User))
{
  <div class="navbar-item has-dropdown is-hoverable">
    <a class="navbar-link">
      Account
    </a>

    <div class="navbar-dropdown">
      <a class="navbar-item">
        About
      </a>
      <a class="navbar-item">
        Jobs
      </a>
      <a class="navbar-item">
        Contact
      </a>
      <hr class="navbar-divider">
      <form id="logout-form" asp-area="Identity" asp-page="/Account/Logout"
      asp-route-returnUrl="@Url.Page("/", new { area = "" })" method="post">
        <a id="submit-logout" class="navbar-item">Logout</a>
      </form>
    </div>
  </div>
}
else
{
  <div class="navbar-item">
    <div class="buttons">
      <a class="button is-primary" asp-area="Identity" asp-page="/Account/Register">
        <strong>Sign up</strong>
      </a>
      <a class="button is-light" asp-area="Identity" asp-page="/Account/Login">
        Log in
      </a>
    </div>
  </div>
}
<script>
  var isUserSignedIn = "@SignInManager.IsSignedIn(User)";
  if (isUserSignedIn === "True") {
    var submitFormLink = document.querySelector('#submit-logout');
    var form = document.querySelector("#logout-form")
    submitFormLink.addEventListener('click', () => {
      form.submit();
    })
  }
</script>